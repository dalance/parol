// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

#![allow(clippy::all)]

use parol_runtime::id_tree::Tree;
use parol_runtime::lexer::{TokenStream, Tokenizer};
use parol_runtime::miette::Result;
use parol_runtime::once_cell::sync::Lazy;
#[allow(unused_imports)]
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production,
};
use std::cell::RefCell;
use std::path::Path;

use crate::oberon2_grammar::Oberon2Grammar;
use crate::oberon2_grammar_trait::Oberon2GrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 72] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r###"BEGIN"###,
    /*  6 */ r###"CASE"###,
    /*  7 */ r###"DO"###,
    /*  8 */ r###"ELSE"###,
    /*  9 */ r###"ELSIF"###,
    /* 10 */ r###"END"###,
    /* 11 */ r###"IF"###,
    /* 12 */ r###"OF"###,
    /* 13 */ r###"PROCEDURE"###,
    /* 14 */ r###"THEN"###,
    /* 15 */ r###"TO"###,
    /* 16 */ r###"VAR"###,
    /* 17 */ r###"MODULE"###,
    /* 18 */ r###";"###,
    /* 19 */ r###"\."###,
    /* 20 */ r###"IMPORT"###,
    /* 21 */ r###","###,
    /* 22 */ r###":="###,
    /* 23 */ r###"CONST"###,
    /* 24 */ r###"TYPE"###,
    /* 25 */ r###"="###,
    /* 26 */ r###":"###,
    /* 27 */ r###"\^"###,
    /* 28 */ r###"\("###,
    /* 29 */ r###"\)"###,
    /* 30 */ r###"ARRAY"###,
    /* 31 */ r###"RECORD"###,
    /* 32 */ r###"POINTER"###,
    /* 33 */ r###"WHILE"###,
    /* 34 */ r###"REPEAT"###,
    /* 35 */ r###"UNTIL"###,
    /* 36 */ r###"FOR"###,
    /* 37 */ r###"LOOP"###,
    /* 38 */ r###"WITH"###,
    /* 39 */ r###"EXIT"###,
    /* 40 */ r###"RETURN"###,
    /* 41 */ r###"\|"###,
    /* 42 */ r###"BY"###,
    /* 43 */ r###"\.\."###,
    /* 44 */ r###"\+"###,
    /* 45 */ r###"-"###,
    /* 46 */ r###"NIL"###,
    /* 47 */ r###"~"###,
    /* 48 */ r###"\{"###,
    /* 49 */ r###"\}"###,
    /* 50 */ r###"#"###,
    /* 51 */ r###"<"###,
    /* 52 */ r###"<="###,
    /* 53 */ r###">"###,
    /* 54 */ r###">="###,
    /* 55 */ r###"IS"###,
    /* 56 */ r###"OR"###,
    /* 57 */ r###"\*"###,
    /* 58 */ r###"/"###,
    /* 59 */ r###"DIV"###,
    /* 60 */ r###"MOD"###,
    /* 61 */ r###"&"###,
    /* 62 */ r###"\["###,
    /* 63 */ r###"\]"###,
    /* 64 */ r###"[0-9][0-9]*\.[0-9]*(ED[+-]?[0-9][0-9]*)?"###,
    /* 65 */ r###"[0-9][0-9A-F]*X"###,
    /* 66 */ r###"[0-9][0-9]*|[0-9][0-9A-F]*H"###,
    /* 67 */ r###"[a-zA-Z_]\w*\.[a-zA-Z_]\w*"###,
    /* 68 */ r###"[a-zA-Z_]\w*"###,
    /* 69 */ r###"\u{0022}[^\u{0022}]*\u{0022}|'[^']*'"###,
    /* 70 */ r###"IN"###,
    /* 71 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 72] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "KwBegin",
    /*  6 */ "KwCase",
    /*  7 */ "KwDo",
    /*  8 */ "KwElse",
    /*  9 */ "KwElsif",
    /* 10 */ "KwEnd",
    /* 11 */ "KwIf",
    /* 12 */ "KwOf",
    /* 13 */ "KwProcedure",
    /* 14 */ "KwThen",
    /* 15 */ "KwTo",
    /* 16 */ "KwVar",
    /* 17 */ "MODULE",
    /* 18 */ "Semicolon",
    /* 19 */ "Dot",
    /* 20 */ "IMPORT",
    /* 21 */ "Comma",
    /* 22 */ "ColonEqu",
    /* 23 */ "CONST",
    /* 24 */ "TYPE",
    /* 25 */ "Equ",
    /* 26 */ "Colon",
    /* 27 */ "Circumflex",
    /* 28 */ "LParen",
    /* 29 */ "RParen",
    /* 30 */ "ARRAY",
    /* 31 */ "RECORD",
    /* 32 */ "POINTER",
    /* 33 */ "WHILE",
    /* 34 */ "REPEAT",
    /* 35 */ "UNTIL",
    /* 36 */ "FOR",
    /* 37 */ "LOOP",
    /* 38 */ "WITH",
    /* 39 */ "EXIT",
    /* 40 */ "RETURN",
    /* 41 */ "Or",
    /* 42 */ "BY",
    /* 43 */ "DotDot",
    /* 44 */ "Plus",
    /* 45 */ "Minus",
    /* 46 */ "NIL",
    /* 47 */ "Tilde",
    /* 48 */ "LBrace",
    /* 49 */ "RBrace",
    /* 50 */ "Hash",
    /* 51 */ "LT",
    /* 52 */ "LTEqu",
    /* 53 */ "GT",
    /* 54 */ "GTEqu",
    /* 55 */ "IS",
    /* 56 */ "OR",
    /* 57 */ "Star",
    /* 58 */ "Slash",
    /* 59 */ "DIV",
    /* 60 */ "MOD",
    /* 61 */ "Amp",
    /* 62 */ "LBracket",
    /* 63 */ "RBracket",
    /* 64 */ "Real",
    /* 65 */ "Character",
    /* 66 */ "Integer",
    /* 67 */ "QIdent",
    /* 68 */ "Ident",
    /* 69 */ "String",
    /* 70 */ "InOp",
    /* 71 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[usize; 66]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ r###"((?ms)\(\*.*?\*\))"###,
    ],
    &[
        5,  /* KwBegin */
        6,  /* KwCase */
        7,  /* KwDo */
        8,  /* KwElse */
        9,  /* KwElsif */
        10, /* KwEnd */
        11, /* KwIf */
        12, /* KwOf */
        13, /* KwProcedure */
        14, /* KwThen */
        15, /* KwTo */
        16, /* KwVar */
        17, /* MODULE */
        18, /* Semicolon */
        19, /* Dot */
        20, /* IMPORT */
        21, /* Comma */
        22, /* ColonEqu */
        23, /* CONST */
        24, /* TYPE */
        25, /* Equ */
        26, /* Colon */
        27, /* Circumflex */
        28, /* LParen */
        29, /* RParen */
        30, /* ARRAY */
        31, /* RECORD */
        32, /* POINTER */
        33, /* WHILE */
        34, /* REPEAT */
        35, /* UNTIL */
        36, /* FOR */
        37, /* LOOP */
        38, /* WITH */
        39, /* EXIT */
        40, /* RETURN */
        41, /* Or */
        42, /* BY */
        43, /* DotDot */
        44, /* Plus */
        45, /* Minus */
        46, /* NIL */
        47, /* Tilde */
        48, /* LBrace */
        49, /* RBrace */
        50, /* Hash */
        51, /* LT */
        52, /* LTEqu */
        53, /* GT */
        54, /* GTEqu */
        55, /* IS */
        56, /* OR */
        57, /* Star */
        58, /* Slash */
        59, /* DIV */
        60, /* MOD */
        61, /* Amp */
        62, /* LBracket */
        63, /* RBracket */
        64, /* Real */
        65, /* Character */
        66, /* Integer */
        67, /* QIdent */
        68, /* Ident */
        69, /* String */
        70, /* InOp */
    ],
);

const MAX_K: usize = 2;

pub const NON_TERMINALS: &[&str; 130] = &[
    /*   0 */ "AddOp",
    /*   1 */ "Case",
    /*   2 */ "CaseLabels",
    /*   3 */ "CaseLabelsOpt",
    /*   4 */ "CaseOpt",
    /*   5 */ "CaseOptList",
    /*   6 */ "Cases",
    /*   7 */ "CasesList",
    /*   8 */ "Character",
    /*   9 */ "ConstDecl",
    /*  10 */ "ConstDeclBlock",
    /*  11 */ "ConstDeclBlockList",
    /*  12 */ "ConstExpr",
    /*  13 */ "DeclBlock",
    /*  14 */ "DeclSeq",
    /*  15 */ "DeclSeqList",
    /*  16 */ "DeclSeqList0",
    /*  17 */ "DeclSeqList0Group",
    /*  18 */ "Designator",
    /*  19 */ "DesignatorList",
    /*  20 */ "DesignatorSuffix",
    /*  21 */ "DoBlock",
    /*  22 */ "Element",
    /*  23 */ "ElementOpt",
    /*  24 */ "ElsePart",
    /*  25 */ "ElsifPart",
    /*  26 */ "Expr",
    /*  27 */ "ExprList",
    /*  28 */ "ExprListList",
    /*  29 */ "ExprOpt",
    /*  30 */ "FPSection",
    /*  31 */ "FPSectionList",
    /*  32 */ "FPSectionOpt",
    /*  33 */ "Factor",
    /*  34 */ "FactorOpt",
    /*  35 */ "FactorOpt0",
    /*  36 */ "FieldList",
    /*  37 */ "FieldListOpt",
    /*  38 */ "ForInit",
    /*  39 */ "ForStep",
    /*  40 */ "FormalPars",
    /*  41 */ "FormalParsOpt",
    /*  42 */ "FormalParsOpt0",
    /*  43 */ "FormalParsOptList",
    /*  44 */ "ForwardDecl",
    /*  45 */ "ForwardDeclOpt",
    /*  46 */ "ForwardDeclOpt0",
    /*  47 */ "Guard",
    /*  48 */ "GuardedDoBlock",
    /*  49 */ "Ident",
    /*  50 */ "IdentDef",
    /*  51 */ "IdentDefOpt",
    /*  52 */ "IdentDefOptGroup",
    /*  53 */ "IdentList",
    /*  54 */ "IdentListList",
    /*  55 */ "ImportList",
    /*  56 */ "ImportListList",
    /*  57 */ "ImportListOpt",
    /*  58 */ "ImportListOpt0",
    /*  59 */ "InOp",
    /*  60 */ "Integer",
    /*  61 */ "KwBegin",
    /*  62 */ "KwCase",
    /*  63 */ "KwDo",
    /*  64 */ "KwElse",
    /*  65 */ "KwElsif",
    /*  66 */ "KwEnd",
    /*  67 */ "KwIf",
    /*  68 */ "KwOf",
    /*  69 */ "KwProcedure",
    /*  70 */ "KwThen",
    /*  71 */ "KwTo",
    /*  72 */ "KwVar",
    /*  73 */ "ModuleBody",
    /*  74 */ "ModuleHead",
    /*  75 */ "MulOp",
    /*  76 */ "Number",
    /*  77 */ "Oberon2",
    /*  78 */ "Oberon2Opt",
    /*  79 */ "OptElsePartEnd",
    /*  80 */ "OptElsePartEndOpt",
    /*  81 */ "ProcDecl",
    /*  82 */ "ProcedureBody",
    /*  83 */ "ProcedureHeading",
    /*  84 */ "ProcedureHeadingOpt",
    /*  85 */ "ProcedureHeadingOpt0",
    /*  86 */ "QIdent",
    /*  87 */ "QualIdent",
    /*  88 */ "Real",
    /*  89 */ "Receiver",
    /*  90 */ "ReceiverOpt",
    /*  91 */ "ReceiverVarDecl",
    /*  92 */ "Relation",
    /*  93 */ "Set",
    /*  94 */ "SetOpt",
    /*  95 */ "SetOptList",
    /*  96 */ "SimpleExpr",
    /*  97 */ "SimpleExprList",
    /*  98 */ "SimpleExprOpt",
    /*  99 */ "SimpleExprOptGroup",
    /* 100 */ "Statement",
    /* 101 */ "StatementBlock",
    /* 102 */ "StatementBlockOpt",
    /* 103 */ "StatementOpt",
    /* 104 */ "StatementOpt0",
    /* 105 */ "StatementOpt1",
    /* 106 */ "StatementOpt2",
    /* 107 */ "StatementOpt3",
    /* 108 */ "StatementOptGroup",
    /* 109 */ "StatementOptGroupList",
    /* 110 */ "StatementOptGroupList0",
    /* 111 */ "StatementOptGroupSuffix",
    /* 112 */ "StatementSeq",
    /* 113 */ "StatementSeqList",
    /* 114 */ "String",
    /* 115 */ "Term",
    /* 116 */ "TermList",
    /* 117 */ "ThenBlock",
    /* 118 */ "TypeDecl",
    /* 119 */ "TypeDeclBlock",
    /* 120 */ "TypeDeclBlockList",
    /* 121 */ "TypeDef",
    /* 122 */ "TypeDefList",
    /* 123 */ "TypeDefOpt",
    /* 124 */ "TypeDefOpt0",
    /* 125 */ "TypeDefOpt1",
    /* 126 */ "TypeDefOptList",
    /* 127 */ "VarDecl",
    /* 128 */ "VarDeclBlock",
    /* 129 */ "VarDeclBlockList",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 130] = &[
    /* 0 - "AddOp" */
    LookaheadDFA {
        states: &[None, Some(189), Some(190), Some(191)],
        transitions: &[
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 2),
            DFATransition(0, 56, 3),
        ],
        k: 1,
    },
    /* 1 - "Case" */
    LookaheadDFA {
        states: &[Some(138)],
        transitions: &[],
        k: 0,
    },
    /* 2 - "CaseLabels" */
    LookaheadDFA {
        states: &[Some(143)],
        transitions: &[],
        k: 0,
    },
    /* 3 - "CaseLabelsOpt" */
    LookaheadDFA {
        states: &[None, Some(144), Some(145)],
        transitions: &[
            DFATransition(0, 21, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 43, 1),
        ],
        k: 1,
    },
    /* 4 - "CaseOpt" */
    LookaheadDFA {
        states: &[None, Some(139), Some(142)],
        transitions: &[
            DFATransition(0, 8, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 28, 1),
            DFATransition(0, 41, 2),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 46, 1),
            DFATransition(0, 47, 1),
            DFATransition(0, 48, 1),
            DFATransition(0, 64, 1),
            DFATransition(0, 65, 1),
            DFATransition(0, 66, 1),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
            DFATransition(0, 69, 1),
        ],
        k: 1,
    },
    /* 5 - "CaseOptList" */
    LookaheadDFA {
        states: &[None, Some(140), Some(141)],
        transitions: &[DFATransition(0, 21, 1), DFATransition(0, 26, 2)],
        k: 1,
    },
    /* 6 - "Cases" */
    LookaheadDFA {
        states: &[Some(126)],
        transitions: &[],
        k: 0,
    },
    /* 7 - "CasesList" */
    LookaheadDFA {
        states: &[None, Some(127), Some(128)],
        transitions: &[
            DFATransition(0, 8, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 41, 1),
        ],
        k: 1,
    },
    /* 8 - "Character" */
    LookaheadDFA {
        states: &[Some(219)],
        transitions: &[],
        k: 0,
    },
    /* 9 - "ConstDecl" */
    LookaheadDFA {
        states: &[Some(43)],
        transitions: &[],
        k: 0,
    },
    /* 10 - "ConstDeclBlock" */
    LookaheadDFA {
        states: &[Some(34)],
        transitions: &[],
        k: 0,
    },
    /* 11 - "ConstDeclBlockList" */
    LookaheadDFA {
        states: &[None, Some(35), Some(36)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 68, 1),
        ],
        k: 1,
    },
    /* 12 - "ConstExpr" */
    LookaheadDFA {
        states: &[Some(147)],
        transitions: &[],
        k: 0,
    },
    /* 13 - "DeclBlock" */
    LookaheadDFA {
        states: &[None, Some(31), Some(32), Some(33)],
        transitions: &[
            DFATransition(0, 16, 3),
            DFATransition(0, 23, 1),
            DFATransition(0, 24, 2),
        ],
        k: 1,
    },
    /* 14 - "DeclSeq" */
    LookaheadDFA {
        states: &[Some(24)],
        transitions: &[],
        k: 0,
    },
    /* 15 - "DeclSeqList" */
    LookaheadDFA {
        states: &[None, Some(29), Some(30)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 16, 1),
            DFATransition(0, 23, 1),
            DFATransition(0, 24, 1),
        ],
        k: 1,
    },
    /* 16 - "DeclSeqList0" */
    LookaheadDFA {
        states: &[None, Some(25), Some(28)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 13, 1),
        ],
        k: 1,
    },
    /* 17 - "DeclSeqList0Group" */
    LookaheadDFA {
        states: &[None, None, Some(26), Some(27)],
        transitions: &[
            DFATransition(0, 13, 1),
            DFATransition(1, 27, 3),
            DFATransition(1, 28, 2),
            DFATransition(1, 68, 2),
        ],
        k: 2,
    },
    /* 18 - "Designator" */
    LookaheadDFA {
        states: &[Some(197)],
        transitions: &[],
        k: 0,
    },
    /* 19 - "DesignatorList" */
    LookaheadDFA {
        states: &[None, Some(198), Some(199)],
        transitions: &[
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 1),
            DFATransition(0, 21, 2),
            DFATransition(0, 22, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 27, 1),
            DFATransition(0, 28, 2),
            DFATransition(0, 29, 2),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 44, 2),
            DFATransition(0, 45, 2),
            DFATransition(0, 49, 2),
            DFATransition(0, 50, 2),
            DFATransition(0, 51, 2),
            DFATransition(0, 52, 2),
            DFATransition(0, 53, 2),
            DFATransition(0, 54, 2),
            DFATransition(0, 55, 2),
            DFATransition(0, 56, 2),
            DFATransition(0, 57, 2),
            DFATransition(0, 58, 2),
            DFATransition(0, 59, 2),
            DFATransition(0, 60, 2),
            DFATransition(0, 61, 2),
            DFATransition(0, 62, 1),
            DFATransition(0, 63, 2),
            DFATransition(0, 70, 2),
        ],
        k: 1,
    },
    /* 20 - "DesignatorSuffix" */
    LookaheadDFA {
        states: &[None, Some(200), Some(201), Some(202)],
        transitions: &[
            DFATransition(0, 19, 1),
            DFATransition(0, 27, 3),
            DFATransition(0, 62, 2),
        ],
        k: 1,
    },
    /* 21 - "DoBlock" */
    LookaheadDFA {
        states: &[Some(134)],
        transitions: &[],
        k: 0,
    },
    /* 22 - "Element" */
    LookaheadDFA {
        states: &[Some(178)],
        transitions: &[],
        k: 0,
    },
    /* 23 - "ElementOpt" */
    LookaheadDFA {
        states: &[None, Some(179), Some(180)],
        transitions: &[
            DFATransition(0, 21, 2),
            DFATransition(0, 43, 1),
            DFATransition(0, 49, 2),
        ],
        k: 1,
    },
    /* 24 - "ElsePart" */
    LookaheadDFA {
        states: &[Some(130)],
        transitions: &[],
        k: 0,
    },
    /* 25 - "ElsifPart" */
    LookaheadDFA {
        states: &[Some(129)],
        transitions: &[],
        k: 0,
    },
    /* 26 - "Expr" */
    LookaheadDFA {
        states: &[Some(148)],
        transitions: &[],
        k: 0,
    },
    /* 27 - "ExprList" */
    LookaheadDFA {
        states: &[Some(203)],
        transitions: &[],
        k: 0,
    },
    /* 28 - "ExprListList" */
    LookaheadDFA {
        states: &[None, Some(204), Some(205)],
        transitions: &[
            DFATransition(0, 21, 1),
            DFATransition(0, 29, 2),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 29 - "ExprOpt" */
    LookaheadDFA {
        states: &[None, Some(149), Some(150)],
        transitions: &[
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 25, 1),
            DFATransition(0, 26, 2),
            DFATransition(0, 29, 2),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 49, 2),
            DFATransition(0, 50, 1),
            DFATransition(0, 51, 1),
            DFATransition(0, 52, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 54, 1),
            DFATransition(0, 55, 1),
            DFATransition(0, 63, 2),
            DFATransition(0, 70, 1),
        ],
        k: 1,
    },
    /* 30 - "FPSection" */
    LookaheadDFA {
        states: &[Some(68)],
        transitions: &[],
        k: 0,
    },
    /* 31 - "FPSectionList" */
    LookaheadDFA {
        states: &[None, Some(69), Some(70)],
        transitions: &[DFATransition(0, 21, 1), DFATransition(0, 26, 2)],
        k: 1,
    },
    /* 32 - "FPSectionOpt" */
    LookaheadDFA {
        states: &[None, Some(71), Some(72)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 68, 2)],
        k: 1,
    },
    /* 33 - "Factor" */
    LookaheadDFA {
        states: &[
            None,
            Some(161),
            Some(162),
            Some(163),
            Some(164),
            Some(165),
            Some(166),
            Some(167),
            Some(168),
        ],
        transitions: &[
            DFATransition(0, 28, 7),
            DFATransition(0, 46, 5),
            DFATransition(0, 47, 8),
            DFATransition(0, 48, 6),
            DFATransition(0, 64, 2),
            DFATransition(0, 65, 3),
            DFATransition(0, 66, 2),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
            DFATransition(0, 69, 4),
        ],
        k: 1,
    },
    /* 34 - "FactorOpt" */
    LookaheadDFA {
        states: &[None, Some(169), Some(172)],
        transitions: &[
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 28, 1),
            DFATransition(0, 29, 2),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 44, 2),
            DFATransition(0, 45, 2),
            DFATransition(0, 49, 2),
            DFATransition(0, 50, 2),
            DFATransition(0, 51, 2),
            DFATransition(0, 52, 2),
            DFATransition(0, 53, 2),
            DFATransition(0, 54, 2),
            DFATransition(0, 55, 2),
            DFATransition(0, 56, 2),
            DFATransition(0, 57, 2),
            DFATransition(0, 58, 2),
            DFATransition(0, 59, 2),
            DFATransition(0, 60, 2),
            DFATransition(0, 61, 2),
            DFATransition(0, 63, 2),
            DFATransition(0, 70, 2),
        ],
        k: 1,
    },
    /* 35 - "FactorOpt0" */
    LookaheadDFA {
        states: &[None, Some(170), Some(171)],
        transitions: &[
            DFATransition(0, 28, 1),
            DFATransition(0, 29, 2),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 46, 1),
            DFATransition(0, 47, 1),
            DFATransition(0, 48, 1),
            DFATransition(0, 64, 1),
            DFATransition(0, 65, 1),
            DFATransition(0, 66, 1),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
            DFATransition(0, 69, 1),
        ],
        k: 1,
    },
    /* 36 - "FieldList" */
    LookaheadDFA {
        states: &[Some(92)],
        transitions: &[],
        k: 0,
    },
    /* 37 - "FieldListOpt" */
    LookaheadDFA {
        states: &[None, Some(93), Some(94)],
        transitions: &[
            DFATransition(0, 10, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 68, 1),
        ],
        k: 1,
    },
    /* 38 - "ForInit" */
    LookaheadDFA {
        states: &[Some(136)],
        transitions: &[],
        k: 0,
    },
    /* 39 - "ForStep" */
    LookaheadDFA {
        states: &[Some(137)],
        transitions: &[],
        k: 0,
    },
    /* 40 - "FormalPars" */
    LookaheadDFA {
        states: &[Some(61)],
        transitions: &[],
        k: 0,
    },
    /* 41 - "FormalParsOpt" */
    LookaheadDFA {
        states: &[None, Some(64), Some(67)],
        transitions: &[
            DFATransition(0, 16, 1),
            DFATransition(0, 29, 2),
            DFATransition(0, 68, 1),
        ],
        k: 1,
    },
    /* 42 - "FormalParsOpt0" */
    LookaheadDFA {
        states: &[None, Some(62), Some(63)],
        transitions: &[
            DFATransition(0, 10, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 26, 1),
            DFATransition(0, 29, 2),
        ],
        k: 1,
    },
    /* 43 - "FormalParsOptList" */
    LookaheadDFA {
        states: &[None, Some(65), Some(66)],
        transitions: &[DFATransition(0, 18, 1), DFATransition(0, 29, 2)],
        k: 1,
    },
    /* 44 - "ForwardDecl" */
    LookaheadDFA {
        states: &[Some(56)],
        transitions: &[],
        k: 0,
    },
    /* 45 - "ForwardDeclOpt" */
    LookaheadDFA {
        states: &[None, Some(59), Some(60)],
        transitions: &[DFATransition(0, 28, 1), DFATransition(0, 68, 2)],
        k: 1,
    },
    /* 46 - "ForwardDeclOpt0" */
    LookaheadDFA {
        states: &[None, Some(57), Some(58)],
        transitions: &[DFATransition(0, 18, 2), DFATransition(0, 28, 1)],
        k: 1,
    },
    /* 47 - "Guard" */
    LookaheadDFA {
        states: &[Some(146)],
        transitions: &[],
        k: 0,
    },
    /* 48 - "GuardedDoBlock" */
    LookaheadDFA {
        states: &[Some(135)],
        transitions: &[],
        k: 0,
    },
    /* 49 - "Ident" */
    LookaheadDFA {
        states: &[Some(222)],
        transitions: &[],
        k: 0,
    },
    /* 50 - "IdentDef" */
    LookaheadDFA {
        states: &[Some(211)],
        transitions: &[],
        k: 0,
    },
    /* 51 - "IdentDefOpt" */
    LookaheadDFA {
        states: &[None, Some(212), Some(215)],
        transitions: &[
            DFATransition(0, 18, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 28, 2),
            DFATransition(0, 45, 1),
            DFATransition(0, 57, 1),
        ],
        k: 1,
    },
    /* 52 - "IdentDefOptGroup" */
    LookaheadDFA {
        states: &[None, Some(213), Some(214)],
        transitions: &[DFATransition(0, 45, 2), DFATransition(0, 57, 1)],
        k: 1,
    },
    /* 53 - "IdentList" */
    LookaheadDFA {
        states: &[Some(206)],
        transitions: &[],
        k: 0,
    },
    /* 54 - "IdentListList" */
    LookaheadDFA {
        states: &[None, Some(207), Some(208)],
        transitions: &[DFATransition(0, 21, 1), DFATransition(0, 26, 2)],
        k: 1,
    },
    /* 55 - "ImportList" */
    LookaheadDFA {
        states: &[Some(17)],
        transitions: &[],
        k: 0,
    },
    /* 56 - "ImportListList" */
    LookaheadDFA {
        states: &[None, Some(18), Some(19)],
        transitions: &[DFATransition(0, 18, 2), DFATransition(0, 21, 1)],
        k: 1,
    },
    /* 57 - "ImportListOpt" */
    LookaheadDFA {
        states: &[None, None, Some(22), Some(23)],
        transitions: &[
            DFATransition(0, 68, 1),
            DFATransition(1, 18, 3),
            DFATransition(1, 21, 3),
            DFATransition(1, 22, 2),
        ],
        k: 2,
    },
    /* 58 - "ImportListOpt0" */
    LookaheadDFA {
        states: &[None, None, Some(20), Some(21)],
        transitions: &[
            DFATransition(0, 68, 1),
            DFATransition(1, 18, 3),
            DFATransition(1, 21, 3),
            DFATransition(1, 22, 2),
        ],
        k: 2,
    },
    /* 59 - "InOp" */
    LookaheadDFA {
        states: &[Some(224)],
        transitions: &[],
        k: 0,
    },
    /* 60 - "Integer" */
    LookaheadDFA {
        states: &[Some(220)],
        transitions: &[],
        k: 0,
    },
    /* 61 - "KwBegin" */
    LookaheadDFA {
        states: &[Some(0)],
        transitions: &[],
        k: 0,
    },
    /* 62 - "KwCase" */
    LookaheadDFA {
        states: &[Some(1)],
        transitions: &[],
        k: 0,
    },
    /* 63 - "KwDo" */
    LookaheadDFA {
        states: &[Some(2)],
        transitions: &[],
        k: 0,
    },
    /* 64 - "KwElse" */
    LookaheadDFA {
        states: &[Some(3)],
        transitions: &[],
        k: 0,
    },
    /* 65 - "KwElsif" */
    LookaheadDFA {
        states: &[Some(4)],
        transitions: &[],
        k: 0,
    },
    /* 66 - "KwEnd" */
    LookaheadDFA {
        states: &[Some(5)],
        transitions: &[],
        k: 0,
    },
    /* 67 - "KwIf" */
    LookaheadDFA {
        states: &[Some(6)],
        transitions: &[],
        k: 0,
    },
    /* 68 - "KwOf" */
    LookaheadDFA {
        states: &[Some(7)],
        transitions: &[],
        k: 0,
    },
    /* 69 - "KwProcedure" */
    LookaheadDFA {
        states: &[Some(8)],
        transitions: &[],
        k: 0,
    },
    /* 70 - "KwThen" */
    LookaheadDFA {
        states: &[Some(9)],
        transitions: &[],
        k: 0,
    },
    /* 71 - "KwTo" */
    LookaheadDFA {
        states: &[Some(10)],
        transitions: &[],
        k: 0,
    },
    /* 72 - "KwVar" */
    LookaheadDFA {
        states: &[Some(11)],
        transitions: &[],
        k: 0,
    },
    /* 73 - "ModuleBody" */
    LookaheadDFA {
        states: &[Some(16)],
        transitions: &[],
        k: 0,
    },
    /* 74 - "ModuleHead" */
    LookaheadDFA {
        states: &[Some(15)],
        transitions: &[],
        k: 0,
    },
    /* 75 - "MulOp" */
    LookaheadDFA {
        states: &[None, Some(192), Some(193), Some(194), Some(195), Some(196)],
        transitions: &[
            DFATransition(0, 57, 1),
            DFATransition(0, 58, 2),
            DFATransition(0, 59, 3),
            DFATransition(0, 60, 4),
            DFATransition(0, 61, 5),
        ],
        k: 1,
    },
    /* 76 - "Number" */
    LookaheadDFA {
        states: &[None, Some(216), Some(217)],
        transitions: &[DFATransition(0, 64, 2), DFATransition(0, 66, 1)],
        k: 1,
    },
    /* 77 - "Oberon2" */
    LookaheadDFA {
        states: &[Some(12)],
        transitions: &[],
        k: 0,
    },
    /* 78 - "Oberon2Opt" */
    LookaheadDFA {
        states: &[None, Some(13), Some(14)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 20, 1),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
        ],
        k: 1,
    },
    /* 79 - "OptElsePartEnd" */
    LookaheadDFA {
        states: &[Some(131)],
        transitions: &[],
        k: 0,
    },
    /* 80 - "OptElsePartEndOpt" */
    LookaheadDFA {
        states: &[None, Some(132), Some(133)],
        transitions: &[DFATransition(0, 8, 1), DFATransition(0, 10, 2)],
        k: 1,
    },
    /* 81 - "ProcDecl" */
    LookaheadDFA {
        states: &[Some(46)],
        transitions: &[],
        k: 0,
    },
    /* 82 - "ProcedureBody" */
    LookaheadDFA {
        states: &[Some(52)],
        transitions: &[],
        k: 0,
    },
    /* 83 - "ProcedureHeading" */
    LookaheadDFA {
        states: &[Some(47)],
        transitions: &[],
        k: 0,
    },
    /* 84 - "ProcedureHeadingOpt" */
    LookaheadDFA {
        states: &[None, Some(50), Some(51)],
        transitions: &[DFATransition(0, 28, 1), DFATransition(0, 68, 2)],
        k: 1,
    },
    /* 85 - "ProcedureHeadingOpt0" */
    LookaheadDFA {
        states: &[None, Some(48), Some(49)],
        transitions: &[DFATransition(0, 18, 2), DFATransition(0, 28, 1)],
        k: 1,
    },
    /* 86 - "QIdent" */
    LookaheadDFA {
        states: &[Some(221)],
        transitions: &[],
        k: 0,
    },
    /* 87 - "QualIdent" */
    LookaheadDFA {
        states: &[None, Some(209), Some(210)],
        transitions: &[DFATransition(0, 67, 2), DFATransition(0, 68, 1)],
        k: 1,
    },
    /* 88 - "Real" */
    LookaheadDFA {
        states: &[Some(218)],
        transitions: &[],
        k: 0,
    },
    /* 89 - "Receiver" */
    LookaheadDFA {
        states: &[Some(73)],
        transitions: &[],
        k: 0,
    },
    /* 90 - "ReceiverOpt" */
    LookaheadDFA {
        states: &[None, Some(74), Some(75)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 68, 2)],
        k: 1,
    },
    /* 91 - "ReceiverVarDecl" */
    LookaheadDFA {
        states: &[Some(76)],
        transitions: &[],
        k: 0,
    },
    /* 92 - "Relation" */
    LookaheadDFA {
        states: &[
            None,
            Some(181),
            Some(182),
            Some(183),
            Some(184),
            Some(185),
            Some(186),
            Some(187),
            Some(188),
        ],
        transitions: &[
            DFATransition(0, 25, 1),
            DFATransition(0, 50, 2),
            DFATransition(0, 51, 3),
            DFATransition(0, 52, 4),
            DFATransition(0, 53, 5),
            DFATransition(0, 54, 6),
            DFATransition(0, 55, 8),
            DFATransition(0, 70, 7),
        ],
        k: 1,
    },
    /* 93 - "Set" */
    LookaheadDFA {
        states: &[Some(173)],
        transitions: &[],
        k: 0,
    },
    /* 94 - "SetOpt" */
    LookaheadDFA {
        states: &[None, Some(174), Some(177)],
        transitions: &[
            DFATransition(0, 28, 1),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 46, 1),
            DFATransition(0, 47, 1),
            DFATransition(0, 48, 1),
            DFATransition(0, 49, 2),
            DFATransition(0, 64, 1),
            DFATransition(0, 65, 1),
            DFATransition(0, 66, 1),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
            DFATransition(0, 69, 1),
        ],
        k: 1,
    },
    /* 95 - "SetOptList" */
    LookaheadDFA {
        states: &[None, Some(175), Some(176)],
        transitions: &[DFATransition(0, 21, 1), DFATransition(0, 49, 2)],
        k: 1,
    },
    /* 96 - "SimpleExpr" */
    LookaheadDFA {
        states: &[Some(151)],
        transitions: &[],
        k: 0,
    },
    /* 97 - "SimpleExprList" */
    LookaheadDFA {
        states: &[None, Some(152), Some(153)],
        transitions: &[
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 29, 2),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 49, 2),
            DFATransition(0, 50, 2),
            DFATransition(0, 51, 2),
            DFATransition(0, 52, 2),
            DFATransition(0, 53, 2),
            DFATransition(0, 54, 2),
            DFATransition(0, 55, 2),
            DFATransition(0, 56, 1),
            DFATransition(0, 63, 2),
            DFATransition(0, 70, 2),
        ],
        k: 1,
    },
    /* 98 - "SimpleExprOpt" */
    LookaheadDFA {
        states: &[None, Some(154), Some(157)],
        transitions: &[
            DFATransition(0, 28, 2),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 46, 2),
            DFATransition(0, 47, 2),
            DFATransition(0, 48, 2),
            DFATransition(0, 64, 2),
            DFATransition(0, 65, 2),
            DFATransition(0, 66, 2),
            DFATransition(0, 67, 2),
            DFATransition(0, 68, 2),
            DFATransition(0, 69, 2),
        ],
        k: 1,
    },
    /* 99 - "SimpleExprOptGroup" */
    LookaheadDFA {
        states: &[None, Some(155), Some(156)],
        transitions: &[DFATransition(0, 44, 1), DFATransition(0, 45, 2)],
        k: 1,
    },
    /* 100 - "Statement" */
    LookaheadDFA {
        states: &[Some(98)],
        transitions: &[],
        k: 0,
    },
    /* 101 - "StatementBlock" */
    LookaheadDFA {
        states: &[Some(53)],
        transitions: &[],
        k: 0,
    },
    /* 102 - "StatementBlockOpt" */
    LookaheadDFA {
        states: &[None, Some(54), Some(55)],
        transitions: &[DFATransition(0, 5, 1), DFATransition(0, 10, 2)],
        k: 1,
    },
    /* 103 - "StatementOpt" */
    LookaheadDFA {
        states: &[None, Some(99), Some(124)],
        transitions: &[
            DFATransition(0, 6, 1),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 1),
            DFATransition(0, 18, 2),
            DFATransition(0, 33, 1),
            DFATransition(0, 34, 1),
            DFATransition(0, 35, 2),
            DFATransition(0, 36, 1),
            DFATransition(0, 37, 1),
            DFATransition(0, 38, 1),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 41, 2),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
        ],
        k: 1,
    },
    /* 104 - "StatementOpt0" */
    LookaheadDFA {
        states: &[None, Some(120), Some(123)],
        transitions: &[
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 28, 1),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
        ],
        k: 1,
    },
    /* 105 - "StatementOpt1" */
    LookaheadDFA {
        states: &[None, Some(118), Some(119)],
        transitions: &[DFATransition(0, 7, 2), DFATransition(0, 42, 1)],
        k: 1,
    },
    /* 106 - "StatementOpt2" */
    LookaheadDFA {
        states: &[None, Some(116), Some(117)],
        transitions: &[
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 28, 1),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 46, 1),
            DFATransition(0, 47, 1),
            DFATransition(0, 48, 1),
            DFATransition(0, 64, 1),
            DFATransition(0, 65, 1),
            DFATransition(0, 66, 1),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
            DFATransition(0, 69, 1),
        ],
        k: 1,
    },
    /* 107 - "StatementOpt3" */
    LookaheadDFA {
        states: &[None, Some(121), Some(122)],
        transitions: &[
            DFATransition(0, 28, 1),
            DFATransition(0, 29, 2),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 46, 1),
            DFATransition(0, 47, 1),
            DFATransition(0, 48, 1),
            DFATransition(0, 64, 1),
            DFATransition(0, 65, 1),
            DFATransition(0, 66, 1),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
            DFATransition(0, 69, 1),
        ],
        k: 1,
    },
    /* 108 - "StatementOptGroup" */
    LookaheadDFA {
        states: &[
            None,
            Some(100),
            Some(103),
            Some(104),
            Some(105),
            Some(106),
            Some(107),
            Some(108),
            Some(109),
            Some(110),
            Some(111),
        ],
        transitions: &[
            DFATransition(0, 6, 3),
            DFATransition(0, 11, 2),
            DFATransition(0, 33, 4),
            DFATransition(0, 34, 5),
            DFATransition(0, 36, 6),
            DFATransition(0, 37, 7),
            DFATransition(0, 38, 8),
            DFATransition(0, 39, 9),
            DFATransition(0, 40, 10),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
        ],
        k: 1,
    },
    /* 109 - "StatementOptGroupList" */
    LookaheadDFA {
        states: &[None, Some(112), Some(113)],
        transitions: &[
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 1),
            DFATransition(0, 10, 2),
        ],
        k: 1,
    },
    /* 110 - "StatementOptGroupList0" */
    LookaheadDFA {
        states: &[None, Some(114), Some(115)],
        transitions: &[
            DFATransition(0, 8, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 41, 1),
        ],
        k: 1,
    },
    /* 111 - "StatementOptGroupSuffix" */
    LookaheadDFA {
        states: &[None, Some(101), Some(102)],
        transitions: &[
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 22, 1),
            DFATransition(0, 28, 2),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
        ],
        k: 1,
    },
    /* 112 - "StatementSeq" */
    LookaheadDFA {
        states: &[Some(95)],
        transitions: &[],
        k: 0,
    },
    /* 113 - "StatementSeqList" */
    LookaheadDFA {
        states: &[None, Some(96), Some(97)],
        transitions: &[
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 18, 1),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
        ],
        k: 1,
    },
    /* 114 - "String" */
    LookaheadDFA {
        states: &[Some(223)],
        transitions: &[],
        k: 0,
    },
    /* 115 - "Term" */
    LookaheadDFA {
        states: &[Some(158)],
        transitions: &[],
        k: 0,
    },
    /* 116 - "TermList" */
    LookaheadDFA {
        states: &[None, Some(159), Some(160)],
        transitions: &[
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 29, 2),
            DFATransition(0, 35, 2),
            DFATransition(0, 41, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 44, 2),
            DFATransition(0, 45, 2),
            DFATransition(0, 49, 2),
            DFATransition(0, 50, 2),
            DFATransition(0, 51, 2),
            DFATransition(0, 52, 2),
            DFATransition(0, 53, 2),
            DFATransition(0, 54, 2),
            DFATransition(0, 55, 2),
            DFATransition(0, 56, 2),
            DFATransition(0, 57, 1),
            DFATransition(0, 58, 1),
            DFATransition(0, 59, 1),
            DFATransition(0, 60, 1),
            DFATransition(0, 61, 1),
            DFATransition(0, 63, 2),
            DFATransition(0, 70, 2),
        ],
        k: 1,
    },
    /* 117 - "ThenBlock" */
    LookaheadDFA {
        states: &[Some(125)],
        transitions: &[],
        k: 0,
    },
    /* 118 - "TypeDecl" */
    LookaheadDFA {
        states: &[Some(44)],
        transitions: &[],
        k: 0,
    },
    /* 119 - "TypeDeclBlock" */
    LookaheadDFA {
        states: &[Some(37)],
        transitions: &[],
        k: 0,
    },
    /* 120 - "TypeDeclBlockList" */
    LookaheadDFA {
        states: &[None, Some(38), Some(39)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 68, 1),
        ],
        k: 1,
    },
    /* 121 - "TypeDef" */
    LookaheadDFA {
        states: &[None, Some(77), Some(78), Some(79), Some(82), Some(83)],
        transitions: &[
            DFATransition(0, 13, 5),
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 3),
            DFATransition(0, 32, 4),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
        ],
        k: 1,
    },
    /* 122 - "TypeDefList" */
    LookaheadDFA {
        states: &[None, Some(80), Some(81)],
        transitions: &[DFATransition(0, 10, 2), DFATransition(0, 18, 1)],
        k: 1,
    },
    /* 123 - "TypeDefOpt" */
    LookaheadDFA {
        states: &[None, Some(88), Some(91)],
        transitions: &[
            DFATransition(0, 12, 2),
            DFATransition(0, 28, 1),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 46, 1),
            DFATransition(0, 47, 1),
            DFATransition(0, 48, 1),
            DFATransition(0, 64, 1),
            DFATransition(0, 65, 1),
            DFATransition(0, 66, 1),
            DFATransition(0, 67, 1),
            DFATransition(0, 68, 1),
            DFATransition(0, 69, 1),
        ],
        k: 1,
    },
    /* 124 - "TypeDefOpt0" */
    LookaheadDFA {
        states: &[None, Some(86), Some(87)],
        transitions: &[
            DFATransition(0, 10, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 28, 1),
            DFATransition(0, 68, 2),
        ],
        k: 1,
    },
    /* 125 - "TypeDefOpt1" */
    LookaheadDFA {
        states: &[None, Some(84), Some(85)],
        transitions: &[
            DFATransition(0, 10, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 28, 1),
            DFATransition(0, 29, 2),
        ],
        k: 1,
    },
    /* 126 - "TypeDefOptList" */
    LookaheadDFA {
        states: &[None, Some(89), Some(90)],
        transitions: &[DFATransition(0, 12, 2), DFATransition(0, 21, 1)],
        k: 1,
    },
    /* 127 - "VarDecl" */
    LookaheadDFA {
        states: &[Some(45)],
        transitions: &[],
        k: 0,
    },
    /* 128 - "VarDeclBlock" */
    LookaheadDFA {
        states: &[Some(40)],
        transitions: &[],
        k: 0,
    },
    /* 129 - "VarDeclBlockList" */
    LookaheadDFA {
        states: &[None, Some(41), Some(42)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 68, 1),
        ],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 225] = &[
    // 0 - KwBegin: "BEGIN"^ /* Clipped */;
    Production {
        lhs: 61,
        production: &[ParseType::T(5)],
    },
    // 1 - KwCase: "CASE"^ /* Clipped */;
    Production {
        lhs: 62,
        production: &[ParseType::T(6)],
    },
    // 2 - KwDo: "DO"^ /* Clipped */;
    Production {
        lhs: 63,
        production: &[ParseType::T(7)],
    },
    // 3 - KwElse: "ELSE"^ /* Clipped */;
    Production {
        lhs: 64,
        production: &[ParseType::T(8)],
    },
    // 4 - KwElsif: "ELSIF"^ /* Clipped */;
    Production {
        lhs: 65,
        production: &[ParseType::T(9)],
    },
    // 5 - KwEnd: "END"^ /* Clipped */;
    Production {
        lhs: 66,
        production: &[ParseType::T(10)],
    },
    // 6 - KwIf: "IF"^ /* Clipped */;
    Production {
        lhs: 67,
        production: &[ParseType::T(11)],
    },
    // 7 - KwOf: "OF"^ /* Clipped */;
    Production {
        lhs: 68,
        production: &[ParseType::T(12)],
    },
    // 8 - KwProcedure: "PROCEDURE"^ /* Clipped */;
    Production {
        lhs: 69,
        production: &[ParseType::T(13)],
    },
    // 9 - KwThen: "THEN"^ /* Clipped */;
    Production {
        lhs: 70,
        production: &[ParseType::T(14)],
    },
    // 10 - KwTo: "TO"^ /* Clipped */;
    Production {
        lhs: 71,
        production: &[ParseType::T(15)],
    },
    // 11 - KwVar: "VAR"^ /* Clipped */;
    Production {
        lhs: 72,
        production: &[ParseType::T(16)],
    },
    // 12 - Oberon2: ModuleHead Oberon2Opt /* Option */ DeclSeq ModuleBody;
    Production {
        lhs: 77,
        production: &[
            ParseType::N(73),
            ParseType::N(14),
            ParseType::N(78),
            ParseType::N(74),
        ],
    },
    // 13 - Oberon2Opt: ImportList;
    Production {
        lhs: 78,
        production: &[ParseType::N(55)],
    },
    // 14 - Oberon2Opt: ;
    Production {
        lhs: 78,
        production: &[],
    },
    // 15 - ModuleHead: "MODULE"^ /* Clipped */ Ident ";"^ /* Clipped */;
    Production {
        lhs: 74,
        production: &[ParseType::T(18), ParseType::N(49), ParseType::T(17)],
    },
    // 16 - ModuleBody: StatementBlock "\."^ /* Clipped */;
    Production {
        lhs: 73,
        production: &[ParseType::T(19), ParseType::N(101)],
    },
    // 17 - ImportList: "IMPORT"^ /* Clipped */ ImportListOpt /* Option */ Ident ImportListList /* Vec */ ";"^ /* Clipped */;
    Production {
        lhs: 55,
        production: &[
            ParseType::T(18),
            ParseType::N(56),
            ParseType::N(49),
            ParseType::N(57),
            ParseType::T(20),
        ],
    },
    // 18 - ImportListList: ","^ /* Clipped */ ImportListOpt0 /* Option */ Ident ImportListList;
    Production {
        lhs: 56,
        production: &[
            ParseType::N(56),
            ParseType::N(49),
            ParseType::N(58),
            ParseType::T(21),
        ],
    },
    // 19 - ImportListList: ;
    Production {
        lhs: 56,
        production: &[],
    },
    // 20 - ImportListOpt0: Ident ":="^ /* Clipped */;
    Production {
        lhs: 58,
        production: &[ParseType::T(22), ParseType::N(49)],
    },
    // 21 - ImportListOpt0: ;
    Production {
        lhs: 58,
        production: &[],
    },
    // 22 - ImportListOpt: Ident ":="^ /* Clipped */;
    Production {
        lhs: 57,
        production: &[ParseType::T(22), ParseType::N(49)],
    },
    // 23 - ImportListOpt: ;
    Production {
        lhs: 57,
        production: &[],
    },
    // 24 - DeclSeq: DeclSeqList /* Vec */ DeclSeqList0 /* Vec */;
    Production {
        lhs: 14,
        production: &[ParseType::N(16), ParseType::N(15)],
    },
    // 25 - DeclSeqList0: DeclSeqList0Group DeclSeqList0;
    Production {
        lhs: 16,
        production: &[ParseType::N(16), ParseType::N(17)],
    },
    // 26 - DeclSeqList0Group: ProcDecl ";"^ /* Clipped */;
    Production {
        lhs: 17,
        production: &[ParseType::T(18), ParseType::N(81)],
    },
    // 27 - DeclSeqList0Group: ForwardDecl ";"^ /* Clipped */;
    Production {
        lhs: 17,
        production: &[ParseType::T(18), ParseType::N(44)],
    },
    // 28 - DeclSeqList0: ;
    Production {
        lhs: 16,
        production: &[],
    },
    // 29 - DeclSeqList: DeclBlock DeclSeqList;
    Production {
        lhs: 15,
        production: &[ParseType::N(15), ParseType::N(13)],
    },
    // 30 - DeclSeqList: ;
    Production {
        lhs: 15,
        production: &[],
    },
    // 31 - DeclBlock: ConstDeclBlock;
    Production {
        lhs: 13,
        production: &[ParseType::N(10)],
    },
    // 32 - DeclBlock: TypeDeclBlock;
    Production {
        lhs: 13,
        production: &[ParseType::N(119)],
    },
    // 33 - DeclBlock: VarDeclBlock;
    Production {
        lhs: 13,
        production: &[ParseType::N(128)],
    },
    // 34 - ConstDeclBlock: "CONST"^ /* Clipped */ ConstDeclBlockList /* Vec */;
    Production {
        lhs: 10,
        production: &[ParseType::N(11), ParseType::T(23)],
    },
    // 35 - ConstDeclBlockList: ConstDecl ";"^ /* Clipped */ ConstDeclBlockList;
    Production {
        lhs: 11,
        production: &[ParseType::N(11), ParseType::T(18), ParseType::N(9)],
    },
    // 36 - ConstDeclBlockList: ;
    Production {
        lhs: 11,
        production: &[],
    },
    // 37 - TypeDeclBlock: "TYPE"^ /* Clipped */ TypeDeclBlockList /* Vec */;
    Production {
        lhs: 119,
        production: &[ParseType::N(120), ParseType::T(24)],
    },
    // 38 - TypeDeclBlockList: TypeDecl ";"^ /* Clipped */ TypeDeclBlockList;
    Production {
        lhs: 120,
        production: &[ParseType::N(120), ParseType::T(18), ParseType::N(118)],
    },
    // 39 - TypeDeclBlockList: ;
    Production {
        lhs: 120,
        production: &[],
    },
    // 40 - VarDeclBlock: KwVar^ /* Clipped */ VarDeclBlockList /* Vec */;
    Production {
        lhs: 128,
        production: &[ParseType::N(129), ParseType::N(72)],
    },
    // 41 - VarDeclBlockList: VarDecl ";"^ /* Clipped */ VarDeclBlockList;
    Production {
        lhs: 129,
        production: &[ParseType::N(129), ParseType::T(18), ParseType::N(127)],
    },
    // 42 - VarDeclBlockList: ;
    Production {
        lhs: 129,
        production: &[],
    },
    // 43 - ConstDecl: IdentDef "="^ /* Clipped */ ConstExpr;
    Production {
        lhs: 9,
        production: &[ParseType::N(12), ParseType::T(25), ParseType::N(50)],
    },
    // 44 - TypeDecl: IdentDef "="^ /* Clipped */ TypeDef;
    Production {
        lhs: 118,
        production: &[ParseType::N(121), ParseType::T(25), ParseType::N(50)],
    },
    // 45 - VarDecl: IdentList ":"^ /* Clipped */ TypeDef;
    Production {
        lhs: 127,
        production: &[ParseType::N(121), ParseType::T(26), ParseType::N(53)],
    },
    // 46 - ProcDecl: ProcedureHeading ";"^ /* Clipped */ ProcedureBody;
    Production {
        lhs: 81,
        production: &[ParseType::N(82), ParseType::T(18), ParseType::N(83)],
    },
    // 47 - ProcedureHeading: KwProcedure^ /* Clipped */ ProcedureHeadingOpt /* Option */ IdentDef ProcedureHeadingOpt0 /* Option */;
    Production {
        lhs: 83,
        production: &[
            ParseType::N(85),
            ParseType::N(50),
            ParseType::N(84),
            ParseType::N(69),
        ],
    },
    // 48 - ProcedureHeadingOpt0: FormalPars;
    Production {
        lhs: 85,
        production: &[ParseType::N(40)],
    },
    // 49 - ProcedureHeadingOpt0: ;
    Production {
        lhs: 85,
        production: &[],
    },
    // 50 - ProcedureHeadingOpt: Receiver;
    Production {
        lhs: 84,
        production: &[ParseType::N(89)],
    },
    // 51 - ProcedureHeadingOpt: ;
    Production {
        lhs: 84,
        production: &[],
    },
    // 52 - ProcedureBody: DeclSeq StatementBlock;
    Production {
        lhs: 82,
        production: &[ParseType::N(101), ParseType::N(14)],
    },
    // 53 - StatementBlock: StatementBlockOpt /* Option */ KwEnd^ /* Clipped */ Ident;
    Production {
        lhs: 101,
        production: &[ParseType::N(49), ParseType::N(66), ParseType::N(102)],
    },
    // 54 - StatementBlockOpt: KwBegin^ /* Clipped */ StatementSeq;
    Production {
        lhs: 102,
        production: &[ParseType::N(112), ParseType::N(61)],
    },
    // 55 - StatementBlockOpt: ;
    Production {
        lhs: 102,
        production: &[],
    },
    // 56 - ForwardDecl: KwProcedure^ /* Clipped */ "\^" ForwardDeclOpt /* Option */ IdentDef ForwardDeclOpt0 /* Option */;
    Production {
        lhs: 44,
        production: &[
            ParseType::N(46),
            ParseType::N(50),
            ParseType::N(45),
            ParseType::T(27),
            ParseType::N(69),
        ],
    },
    // 57 - ForwardDeclOpt0: FormalPars;
    Production {
        lhs: 46,
        production: &[ParseType::N(40)],
    },
    // 58 - ForwardDeclOpt0: ;
    Production {
        lhs: 46,
        production: &[],
    },
    // 59 - ForwardDeclOpt: Receiver;
    Production {
        lhs: 45,
        production: &[ParseType::N(89)],
    },
    // 60 - ForwardDeclOpt: ;
    Production {
        lhs: 45,
        production: &[],
    },
    // 61 - FormalPars: "\("^ /* Clipped */ FormalParsOpt /* Option */ "\)"^ /* Clipped */ FormalParsOpt0 /* Option */;
    Production {
        lhs: 40,
        production: &[
            ParseType::N(42),
            ParseType::T(29),
            ParseType::N(41),
            ParseType::T(28),
        ],
    },
    // 62 - FormalParsOpt0: ":"^ /* Clipped */ QualIdent;
    Production {
        lhs: 42,
        production: &[ParseType::N(87), ParseType::T(26)],
    },
    // 63 - FormalParsOpt0: ;
    Production {
        lhs: 42,
        production: &[],
    },
    // 64 - FormalParsOpt: FPSection FormalParsOptList /* Vec */;
    Production {
        lhs: 41,
        production: &[ParseType::N(43), ParseType::N(30)],
    },
    // 65 - FormalParsOptList: ";"^ /* Clipped */ FPSection FormalParsOptList;
    Production {
        lhs: 43,
        production: &[ParseType::N(43), ParseType::N(30), ParseType::T(18)],
    },
    // 66 - FormalParsOptList: ;
    Production {
        lhs: 43,
        production: &[],
    },
    // 67 - FormalParsOpt: ;
    Production {
        lhs: 41,
        production: &[],
    },
    // 68 - FPSection: FPSectionOpt /* Option */ Ident FPSectionList /* Vec */ ":"^ /* Clipped */ TypeDef;
    Production {
        lhs: 30,
        production: &[
            ParseType::N(121),
            ParseType::T(26),
            ParseType::N(31),
            ParseType::N(49),
            ParseType::N(32),
        ],
    },
    // 69 - FPSectionList: ","^ /* Clipped */ Ident FPSectionList;
    Production {
        lhs: 31,
        production: &[ParseType::N(31), ParseType::N(49), ParseType::T(21)],
    },
    // 70 - FPSectionList: ;
    Production {
        lhs: 31,
        production: &[],
    },
    // 71 - FPSectionOpt: KwVar^ /* Clipped */;
    Production {
        lhs: 32,
        production: &[ParseType::N(72)],
    },
    // 72 - FPSectionOpt: ;
    Production {
        lhs: 32,
        production: &[],
    },
    // 73 - Receiver: "\("^ /* Clipped */ ReceiverOpt /* Option */ ReceiverVarDecl "\)"^ /* Clipped */;
    Production {
        lhs: 89,
        production: &[
            ParseType::T(29),
            ParseType::N(91),
            ParseType::N(90),
            ParseType::T(28),
        ],
    },
    // 74 - ReceiverOpt: KwVar^ /* Clipped */;
    Production {
        lhs: 90,
        production: &[ParseType::N(72)],
    },
    // 75 - ReceiverOpt: ;
    Production {
        lhs: 90,
        production: &[],
    },
    // 76 - ReceiverVarDecl: Ident ":"^ /* Clipped */ Ident;
    Production {
        lhs: 91,
        production: &[ParseType::N(49), ParseType::T(26), ParseType::N(49)],
    },
    // 77 - TypeDef: QualIdent;
    Production {
        lhs: 121,
        production: &[ParseType::N(87)],
    },
    // 78 - TypeDef: "ARRAY"^ /* Clipped */ TypeDefOpt /* Option */ KwOf^ /* Clipped */ TypeDef;
    Production {
        lhs: 121,
        production: &[
            ParseType::N(121),
            ParseType::N(68),
            ParseType::N(123),
            ParseType::T(30),
        ],
    },
    // 79 - TypeDef: "RECORD"^ /* Clipped */ TypeDefOpt0 /* Option */ FieldList TypeDefList /* Vec */ KwEnd^ /* Clipped */;
    Production {
        lhs: 121,
        production: &[
            ParseType::N(66),
            ParseType::N(122),
            ParseType::N(36),
            ParseType::N(124),
            ParseType::T(31),
        ],
    },
    // 80 - TypeDefList: ";"^ /* Clipped */ FieldList TypeDefList;
    Production {
        lhs: 122,
        production: &[ParseType::N(122), ParseType::N(36), ParseType::T(18)],
    },
    // 81 - TypeDefList: ;
    Production {
        lhs: 122,
        production: &[],
    },
    // 82 - TypeDef: "POINTER"^ /* Clipped */ KwTo^ /* Clipped */ TypeDef;
    Production {
        lhs: 121,
        production: &[ParseType::N(121), ParseType::N(71), ParseType::T(32)],
    },
    // 83 - TypeDef: KwProcedure^ /* Clipped */ TypeDefOpt1 /* Option */;
    Production {
        lhs: 121,
        production: &[ParseType::N(125), ParseType::N(69)],
    },
    // 84 - TypeDefOpt1: FormalPars;
    Production {
        lhs: 125,
        production: &[ParseType::N(40)],
    },
    // 85 - TypeDefOpt1: ;
    Production {
        lhs: 125,
        production: &[],
    },
    // 86 - TypeDefOpt0: "\("^ /* Clipped */ QualIdent "\)"^ /* Clipped */;
    Production {
        lhs: 124,
        production: &[ParseType::T(29), ParseType::N(87), ParseType::T(28)],
    },
    // 87 - TypeDefOpt0: ;
    Production {
        lhs: 124,
        production: &[],
    },
    // 88 - TypeDefOpt: ConstExpr TypeDefOptList /* Vec */;
    Production {
        lhs: 123,
        production: &[ParseType::N(126), ParseType::N(12)],
    },
    // 89 - TypeDefOptList: ","^ /* Clipped */ ConstExpr TypeDefOptList;
    Production {
        lhs: 126,
        production: &[ParseType::N(126), ParseType::N(12), ParseType::T(21)],
    },
    // 90 - TypeDefOptList: ;
    Production {
        lhs: 126,
        production: &[],
    },
    // 91 - TypeDefOpt: ;
    Production {
        lhs: 123,
        production: &[],
    },
    // 92 - FieldList: FieldListOpt /* Option */;
    Production {
        lhs: 36,
        production: &[ParseType::N(37)],
    },
    // 93 - FieldListOpt: IdentList ":"^ /* Clipped */ TypeDef;
    Production {
        lhs: 37,
        production: &[ParseType::N(121), ParseType::T(26), ParseType::N(53)],
    },
    // 94 - FieldListOpt: ;
    Production {
        lhs: 37,
        production: &[],
    },
    // 95 - StatementSeq: Statement StatementSeqList /* Vec */;
    Production {
        lhs: 112,
        production: &[ParseType::N(113), ParseType::N(100)],
    },
    // 96 - StatementSeqList: ";"^ /* Clipped */ Statement StatementSeqList;
    Production {
        lhs: 113,
        production: &[ParseType::N(113), ParseType::N(100), ParseType::T(18)],
    },
    // 97 - StatementSeqList: ;
    Production {
        lhs: 113,
        production: &[],
    },
    // 98 - Statement: StatementOpt /* Option */;
    Production {
        lhs: 100,
        production: &[ParseType::N(103)],
    },
    // 99 - StatementOpt: StatementOptGroup;
    Production {
        lhs: 103,
        production: &[ParseType::N(108)],
    },
    // 100 - StatementOptGroup: Designator StatementOptGroupSuffix;
    Production {
        lhs: 108,
        production: &[ParseType::N(111), ParseType::N(18)],
    },
    // 101 - StatementOptGroupSuffix: ":="^ /* Clipped */ Expr;
    Production {
        lhs: 111,
        production: &[ParseType::N(26), ParseType::T(22)],
    },
    // 102 - StatementOptGroupSuffix: StatementOpt0 /* Option */;
    Production {
        lhs: 111,
        production: &[ParseType::N(104)],
    },
    // 103 - StatementOptGroup: KwIf^ /* Clipped */ Expr ThenBlock StatementOptGroupList /* Vec */ OptElsePartEnd;
    Production {
        lhs: 108,
        production: &[
            ParseType::N(79),
            ParseType::N(109),
            ParseType::N(117),
            ParseType::N(26),
            ParseType::N(67),
        ],
    },
    // 104 - StatementOptGroup: KwCase^ /* Clipped */ Expr KwOf^ /* Clipped */ Cases OptElsePartEnd;
    Production {
        lhs: 108,
        production: &[
            ParseType::N(79),
            ParseType::N(6),
            ParseType::N(68),
            ParseType::N(26),
            ParseType::N(62),
        ],
    },
    // 105 - StatementOptGroup: "WHILE"^ /* Clipped */ Expr DoBlock;
    Production {
        lhs: 108,
        production: &[ParseType::N(21), ParseType::N(26), ParseType::T(33)],
    },
    // 106 - StatementOptGroup: "REPEAT"^ /* Clipped */ StatementSeq "UNTIL"^ /* Clipped */ Expr;
    Production {
        lhs: 108,
        production: &[
            ParseType::N(26),
            ParseType::T(35),
            ParseType::N(112),
            ParseType::T(34),
        ],
    },
    // 107 - StatementOptGroup: "FOR"^ /* Clipped */ ForInit StatementOpt1 /* Option */ DoBlock;
    Production {
        lhs: 108,
        production: &[
            ParseType::N(21),
            ParseType::N(105),
            ParseType::N(38),
            ParseType::T(36),
        ],
    },
    // 108 - StatementOptGroup: "LOOP"^ /* Clipped */ StatementSeq KwEnd^ /* Clipped */;
    Production {
        lhs: 108,
        production: &[ParseType::N(66), ParseType::N(112), ParseType::T(37)],
    },
    // 109 - StatementOptGroup: "WITH"^ /* Clipped */ GuardedDoBlock StatementOptGroupList0 /* Vec */ OptElsePartEnd;
    Production {
        lhs: 108,
        production: &[
            ParseType::N(79),
            ParseType::N(110),
            ParseType::N(48),
            ParseType::T(38),
        ],
    },
    // 110 - StatementOptGroup: "EXIT"^ /* Clipped */;
    Production {
        lhs: 108,
        production: &[ParseType::T(39)],
    },
    // 111 - StatementOptGroup: "RETURN"^ /* Clipped */ StatementOpt2 /* Option */;
    Production {
        lhs: 108,
        production: &[ParseType::N(106), ParseType::T(40)],
    },
    // 112 - StatementOptGroupList: ElsifPart StatementOptGroupList;
    Production {
        lhs: 109,
        production: &[ParseType::N(109), ParseType::N(25)],
    },
    // 113 - StatementOptGroupList: ;
    Production {
        lhs: 109,
        production: &[],
    },
    // 114 - StatementOptGroupList0: "\|"^ /* Clipped */ GuardedDoBlock StatementOptGroupList0;
    Production {
        lhs: 110,
        production: &[ParseType::N(110), ParseType::N(48), ParseType::T(41)],
    },
    // 115 - StatementOptGroupList0: ;
    Production {
        lhs: 110,
        production: &[],
    },
    // 116 - StatementOpt2: Expr;
    Production {
        lhs: 106,
        production: &[ParseType::N(26)],
    },
    // 117 - StatementOpt2: ;
    Production {
        lhs: 106,
        production: &[],
    },
    // 118 - StatementOpt1: ForStep;
    Production {
        lhs: 105,
        production: &[ParseType::N(39)],
    },
    // 119 - StatementOpt1: ;
    Production {
        lhs: 105,
        production: &[],
    },
    // 120 - StatementOpt0: "\("^ /* Clipped */ StatementOpt3 /* Option */ "\)"^ /* Clipped */;
    Production {
        lhs: 104,
        production: &[ParseType::T(29), ParseType::N(107), ParseType::T(28)],
    },
    // 121 - StatementOpt3: ExprList;
    Production {
        lhs: 107,
        production: &[ParseType::N(27)],
    },
    // 122 - StatementOpt3: ;
    Production {
        lhs: 107,
        production: &[],
    },
    // 123 - StatementOpt0: ;
    Production {
        lhs: 104,
        production: &[],
    },
    // 124 - StatementOpt: ;
    Production {
        lhs: 103,
        production: &[],
    },
    // 125 - ThenBlock: KwThen^ /* Clipped */ StatementSeq;
    Production {
        lhs: 117,
        production: &[ParseType::N(112), ParseType::N(70)],
    },
    // 126 - Cases: Case CasesList /* Vec */;
    Production {
        lhs: 6,
        production: &[ParseType::N(7), ParseType::N(1)],
    },
    // 127 - CasesList: "\|"^ /* Clipped */ Case CasesList;
    Production {
        lhs: 7,
        production: &[ParseType::N(7), ParseType::N(1), ParseType::T(41)],
    },
    // 128 - CasesList: ;
    Production {
        lhs: 7,
        production: &[],
    },
    // 129 - ElsifPart: KwElsif^ /* Clipped */ Expr ThenBlock;
    Production {
        lhs: 25,
        production: &[ParseType::N(117), ParseType::N(26), ParseType::N(65)],
    },
    // 130 - ElsePart: KwElse^ /* Clipped */ StatementSeq;
    Production {
        lhs: 24,
        production: &[ParseType::N(112), ParseType::N(64)],
    },
    // 131 - OptElsePartEnd: OptElsePartEndOpt /* Option */ KwEnd^ /* Clipped */;
    Production {
        lhs: 79,
        production: &[ParseType::N(66), ParseType::N(80)],
    },
    // 132 - OptElsePartEndOpt: ElsePart;
    Production {
        lhs: 80,
        production: &[ParseType::N(24)],
    },
    // 133 - OptElsePartEndOpt: ;
    Production {
        lhs: 80,
        production: &[],
    },
    // 134 - DoBlock: KwDo^ /* Clipped */ StatementSeq KwEnd^ /* Clipped */;
    Production {
        lhs: 21,
        production: &[ParseType::N(66), ParseType::N(112), ParseType::N(63)],
    },
    // 135 - GuardedDoBlock: Guard KwDo^ /* Clipped */ StatementSeq;
    Production {
        lhs: 48,
        production: &[ParseType::N(112), ParseType::N(63), ParseType::N(47)],
    },
    // 136 - ForInit: Ident ":="^ /* Clipped */ Expr KwTo^ /* Clipped */ Expr;
    Production {
        lhs: 38,
        production: &[
            ParseType::N(26),
            ParseType::N(71),
            ParseType::N(26),
            ParseType::T(22),
            ParseType::N(49),
        ],
    },
    // 137 - ForStep: "BY"^ /* Clipped */ ConstExpr;
    Production {
        lhs: 39,
        production: &[ParseType::N(12), ParseType::T(42)],
    },
    // 138 - Case: CaseOpt /* Option */;
    Production {
        lhs: 1,
        production: &[ParseType::N(4)],
    },
    // 139 - CaseOpt: CaseLabels CaseOptList /* Vec */ ":"^ /* Clipped */ StatementSeq;
    Production {
        lhs: 4,
        production: &[
            ParseType::N(112),
            ParseType::T(26),
            ParseType::N(5),
            ParseType::N(2),
        ],
    },
    // 140 - CaseOptList: ","^ /* Clipped */ CaseLabels CaseOptList;
    Production {
        lhs: 5,
        production: &[ParseType::N(5), ParseType::N(2), ParseType::T(21)],
    },
    // 141 - CaseOptList: ;
    Production {
        lhs: 5,
        production: &[],
    },
    // 142 - CaseOpt: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 143 - CaseLabels: ConstExpr CaseLabelsOpt /* Option */;
    Production {
        lhs: 2,
        production: &[ParseType::N(3), ParseType::N(12)],
    },
    // 144 - CaseLabelsOpt: "\.\." ConstExpr;
    Production {
        lhs: 3,
        production: &[ParseType::N(12), ParseType::T(43)],
    },
    // 145 - CaseLabelsOpt: ;
    Production {
        lhs: 3,
        production: &[],
    },
    // 146 - Guard: QualIdent ":"^ /* Clipped */ QualIdent;
    Production {
        lhs: 47,
        production: &[ParseType::N(87), ParseType::T(26), ParseType::N(87)],
    },
    // 147 - ConstExpr: Expr;
    Production {
        lhs: 12,
        production: &[ParseType::N(26)],
    },
    // 148 - Expr: SimpleExpr ExprOpt /* Option */;
    Production {
        lhs: 26,
        production: &[ParseType::N(29), ParseType::N(96)],
    },
    // 149 - ExprOpt: Relation SimpleExpr;
    Production {
        lhs: 29,
        production: &[ParseType::N(96), ParseType::N(92)],
    },
    // 150 - ExprOpt: ;
    Production {
        lhs: 29,
        production: &[],
    },
    // 151 - SimpleExpr: SimpleExprOpt /* Option */ Term SimpleExprList /* Vec */;
    Production {
        lhs: 96,
        production: &[ParseType::N(97), ParseType::N(115), ParseType::N(98)],
    },
    // 152 - SimpleExprList: AddOp Term SimpleExprList;
    Production {
        lhs: 97,
        production: &[ParseType::N(97), ParseType::N(115), ParseType::N(0)],
    },
    // 153 - SimpleExprList: ;
    Production {
        lhs: 97,
        production: &[],
    },
    // 154 - SimpleExprOpt: SimpleExprOptGroup;
    Production {
        lhs: 98,
        production: &[ParseType::N(99)],
    },
    // 155 - SimpleExprOptGroup: "\+";
    Production {
        lhs: 99,
        production: &[ParseType::T(44)],
    },
    // 156 - SimpleExprOptGroup: "-";
    Production {
        lhs: 99,
        production: &[ParseType::T(45)],
    },
    // 157 - SimpleExprOpt: ;
    Production {
        lhs: 98,
        production: &[],
    },
    // 158 - Term: Factor TermList /* Vec */;
    Production {
        lhs: 115,
        production: &[ParseType::N(116), ParseType::N(33)],
    },
    // 159 - TermList: MulOp Factor TermList;
    Production {
        lhs: 116,
        production: &[ParseType::N(116), ParseType::N(33), ParseType::N(75)],
    },
    // 160 - TermList: ;
    Production {
        lhs: 116,
        production: &[],
    },
    // 161 - Factor: Designator FactorOpt /* Option */;
    Production {
        lhs: 33,
        production: &[ParseType::N(34), ParseType::N(18)],
    },
    // 162 - Factor: Number;
    Production {
        lhs: 33,
        production: &[ParseType::N(76)],
    },
    // 163 - Factor: Character;
    Production {
        lhs: 33,
        production: &[ParseType::N(8)],
    },
    // 164 - Factor: String;
    Production {
        lhs: 33,
        production: &[ParseType::N(114)],
    },
    // 165 - Factor: "NIL"^ /* Clipped */;
    Production {
        lhs: 33,
        production: &[ParseType::T(46)],
    },
    // 166 - Factor: Set;
    Production {
        lhs: 33,
        production: &[ParseType::N(93)],
    },
    // 167 - Factor: "\("^ /* Clipped */ Expr "\)"^ /* Clipped */;
    Production {
        lhs: 33,
        production: &[ParseType::T(29), ParseType::N(26), ParseType::T(28)],
    },
    // 168 - Factor: "~"^ /* Clipped */ Factor;
    Production {
        lhs: 33,
        production: &[ParseType::N(33), ParseType::T(47)],
    },
    // 169 - FactorOpt: "\("^ /* Clipped */ FactorOpt0 /* Option */ "\)"^ /* Clipped */;
    Production {
        lhs: 34,
        production: &[ParseType::T(29), ParseType::N(35), ParseType::T(28)],
    },
    // 170 - FactorOpt0: ExprList;
    Production {
        lhs: 35,
        production: &[ParseType::N(27)],
    },
    // 171 - FactorOpt0: ;
    Production {
        lhs: 35,
        production: &[],
    },
    // 172 - FactorOpt: ;
    Production {
        lhs: 34,
        production: &[],
    },
    // 173 - Set: "\{"^ /* Clipped */ SetOpt /* Option */ "\}"^ /* Clipped */;
    Production {
        lhs: 93,
        production: &[ParseType::T(49), ParseType::N(94), ParseType::T(48)],
    },
    // 174 - SetOpt: Element SetOptList /* Vec */;
    Production {
        lhs: 94,
        production: &[ParseType::N(95), ParseType::N(22)],
    },
    // 175 - SetOptList: ","^ /* Clipped */ Element SetOptList;
    Production {
        lhs: 95,
        production: &[ParseType::N(95), ParseType::N(22), ParseType::T(21)],
    },
    // 176 - SetOptList: ;
    Production {
        lhs: 95,
        production: &[],
    },
    // 177 - SetOpt: ;
    Production {
        lhs: 94,
        production: &[],
    },
    // 178 - Element: Expr ElementOpt /* Option */;
    Production {
        lhs: 22,
        production: &[ParseType::N(23), ParseType::N(26)],
    },
    // 179 - ElementOpt: "\.\."^ /* Clipped */ Expr;
    Production {
        lhs: 23,
        production: &[ParseType::N(26), ParseType::T(43)],
    },
    // 180 - ElementOpt: ;
    Production {
        lhs: 23,
        production: &[],
    },
    // 181 - Relation: "="^ /* Clipped */;
    Production {
        lhs: 92,
        production: &[ParseType::T(25)],
    },
    // 182 - Relation: "#";
    Production {
        lhs: 92,
        production: &[ParseType::T(50)],
    },
    // 183 - Relation: "<";
    Production {
        lhs: 92,
        production: &[ParseType::T(51)],
    },
    // 184 - Relation: "<=";
    Production {
        lhs: 92,
        production: &[ParseType::T(52)],
    },
    // 185 - Relation: ">";
    Production {
        lhs: 92,
        production: &[ParseType::T(53)],
    },
    // 186 - Relation: ">=";
    Production {
        lhs: 92,
        production: &[ParseType::T(54)],
    },
    // 187 - Relation: InOp;
    Production {
        lhs: 92,
        production: &[ParseType::N(59)],
    },
    // 188 - Relation: "IS";
    Production {
        lhs: 92,
        production: &[ParseType::T(55)],
    },
    // 189 - AddOp: "\+";
    Production {
        lhs: 0,
        production: &[ParseType::T(44)],
    },
    // 190 - AddOp: "-";
    Production {
        lhs: 0,
        production: &[ParseType::T(45)],
    },
    // 191 - AddOp: "OR";
    Production {
        lhs: 0,
        production: &[ParseType::T(56)],
    },
    // 192 - MulOp: "\*";
    Production {
        lhs: 75,
        production: &[ParseType::T(57)],
    },
    // 193 - MulOp: "/";
    Production {
        lhs: 75,
        production: &[ParseType::T(58)],
    },
    // 194 - MulOp: "DIV";
    Production {
        lhs: 75,
        production: &[ParseType::T(59)],
    },
    // 195 - MulOp: "MOD";
    Production {
        lhs: 75,
        production: &[ParseType::T(60)],
    },
    // 196 - MulOp: "&";
    Production {
        lhs: 75,
        production: &[ParseType::T(61)],
    },
    // 197 - Designator: QualIdent DesignatorList /* Vec */;
    Production {
        lhs: 18,
        production: &[ParseType::N(19), ParseType::N(87)],
    },
    // 198 - DesignatorList: DesignatorSuffix DesignatorList;
    Production {
        lhs: 19,
        production: &[ParseType::N(19), ParseType::N(20)],
    },
    // 199 - DesignatorList: ;
    Production {
        lhs: 19,
        production: &[],
    },
    // 200 - DesignatorSuffix: "\."^ /* Clipped */ Ident;
    Production {
        lhs: 20,
        production: &[ParseType::N(49), ParseType::T(19)],
    },
    // 201 - DesignatorSuffix: "\["^ /* Clipped */ ExprList "\]"^ /* Clipped */;
    Production {
        lhs: 20,
        production: &[ParseType::T(63), ParseType::N(27), ParseType::T(62)],
    },
    // 202 - DesignatorSuffix: "\^"^ /* Clipped */;
    Production {
        lhs: 20,
        production: &[ParseType::T(27)],
    },
    // 203 - ExprList: Expr ExprListList /* Vec */;
    Production {
        lhs: 27,
        production: &[ParseType::N(28), ParseType::N(26)],
    },
    // 204 - ExprListList: ","^ /* Clipped */ Expr ExprListList;
    Production {
        lhs: 28,
        production: &[ParseType::N(28), ParseType::N(26), ParseType::T(21)],
    },
    // 205 - ExprListList: ;
    Production {
        lhs: 28,
        production: &[],
    },
    // 206 - IdentList: IdentDef IdentListList /* Vec */;
    Production {
        lhs: 53,
        production: &[ParseType::N(54), ParseType::N(50)],
    },
    // 207 - IdentListList: ","^ /* Clipped */ IdentDef IdentListList;
    Production {
        lhs: 54,
        production: &[ParseType::N(54), ParseType::N(50), ParseType::T(21)],
    },
    // 208 - IdentListList: ;
    Production {
        lhs: 54,
        production: &[],
    },
    // 209 - QualIdent: Ident;
    Production {
        lhs: 87,
        production: &[ParseType::N(49)],
    },
    // 210 - QualIdent: QIdent;
    Production {
        lhs: 87,
        production: &[ParseType::N(86)],
    },
    // 211 - IdentDef: Ident IdentDefOpt /* Option */;
    Production {
        lhs: 50,
        production: &[ParseType::N(51), ParseType::N(49)],
    },
    // 212 - IdentDefOpt: IdentDefOptGroup;
    Production {
        lhs: 51,
        production: &[ParseType::N(52)],
    },
    // 213 - IdentDefOptGroup: "\*";
    Production {
        lhs: 52,
        production: &[ParseType::T(57)],
    },
    // 214 - IdentDefOptGroup: "-";
    Production {
        lhs: 52,
        production: &[ParseType::T(45)],
    },
    // 215 - IdentDefOpt: ;
    Production {
        lhs: 51,
        production: &[],
    },
    // 216 - Number: Integer;
    Production {
        lhs: 76,
        production: &[ParseType::N(60)],
    },
    // 217 - Number: Real;
    Production {
        lhs: 76,
        production: &[ParseType::N(88)],
    },
    // 218 - Real: "[0-9][0-9]*\.[0-9]*(ED[+-]?[0-9][0-9]*)?";
    Production {
        lhs: 88,
        production: &[ParseType::T(64)],
    },
    // 219 - Character: "[0-9][0-9A-F]*X";
    Production {
        lhs: 8,
        production: &[ParseType::T(65)],
    },
    // 220 - Integer: "[0-9][0-9]*|[0-9][0-9A-F]*H";
    Production {
        lhs: 60,
        production: &[ParseType::T(66)],
    },
    // 221 - QIdent: "[a-zA-Z_]\w*\.[a-zA-Z_]\w*";
    Production {
        lhs: 86,
        production: &[ParseType::T(67)],
    },
    // 222 - Ident: "[a-zA-Z_]\w*";
    Production {
        lhs: 49,
        production: &[ParseType::T(68)],
    },
    // 223 - String: "\u{0022}[^\u{0022}]*\u{0022}|'[^']*'";
    Production {
        lhs: 114,
        production: &[ParseType::T(69)],
    },
    // 224 - InOp: "IN"^ /* Clipped */;
    Production {
        lhs: 59,
        production: &[ParseType::T(70)],
    },
];

static TOKENIZERS: Lazy<Vec<(&'static str, Tokenizer)>> = Lazy::new(|| {
    vec![(
        "INITIAL",
        Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap(),
    )]
});

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut Oberon2Grammar<'t>,
) -> Result<Tree<ParseTreeType<'t>>>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        77,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    // Initialize wrapper
    let mut user_actions = Oberon2GrammarAuto::new(user_actions);
    let result = llk_parser.parse(token_stream, &mut user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
